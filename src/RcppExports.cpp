// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// initializeTerms
SEXP initializeTerms(Rcpp::NumericMatrix X, Rcpp::NumericVector neg_offset, int max_vars);
RcppExport SEXP _BITS_initializeTerms(SEXP XSEXP, SEXP neg_offsetSEXP, SEXP max_varsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type neg_offset(neg_offsetSEXP);
    Rcpp::traits::input_parameter< int >::type max_vars(max_varsSEXP);
    rcpp_result_gen = Rcpp::wrap(initializeTerms(X, neg_offset, max_vars));
    return rcpp_result_gen;
END_RCPP
}
// completeSearch
Rcpp::List completeSearch(Rcpp::NumericMatrix X, Rcpp::NumericVector y, Rcpp::NumericVector neg_offset, int max_vars, double gamma, SEXP set_vars_R, bool reuse_terms, int max_iter, bool force_model, bool adjust_shady_int);
RcppExport SEXP _BITS_completeSearch(SEXP XSEXP, SEXP ySEXP, SEXP neg_offsetSEXP, SEXP max_varsSEXP, SEXP gammaSEXP, SEXP set_vars_RSEXP, SEXP reuse_termsSEXP, SEXP max_iterSEXP, SEXP force_modelSEXP, SEXP adjust_shady_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type neg_offset(neg_offsetSEXP);
    Rcpp::traits::input_parameter< int >::type max_vars(max_varsSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type set_vars_R(set_vars_RSEXP);
    Rcpp::traits::input_parameter< bool >::type reuse_terms(reuse_termsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type force_model(force_modelSEXP);
    Rcpp::traits::input_parameter< bool >::type adjust_shady_int(adjust_shady_intSEXP);
    rcpp_result_gen = Rcpp::wrap(completeSearch(X, y, neg_offset, max_vars, gamma, set_vars_R, reuse_terms, max_iter, force_model, adjust_shady_int));
    return rcpp_result_gen;
END_RCPP
}
// memoryTest
SEXP memoryTest();
RcppExport SEXP _BITS_memoryTest() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(memoryTest());
    return rcpp_result_gen;
END_RCPP
}
// customLm
Rcpp::List customLm(Rcpp::NumericMatrix Xr, Rcpp::NumericVector yr);
RcppExport SEXP _BITS_customLm(SEXP XrSEXP, SEXP yrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yr(yrSEXP);
    rcpp_result_gen = Rcpp::wrap(customLm(Xr, yr));
    return rcpp_result_gen;
END_RCPP
}
// matrixVectorMult
Rcpp::NumericMatrix matrixVectorMult(Rcpp::NumericMatrix Z, Rcpp::NumericVector y);
RcppExport SEXP _BITS_matrixVectorMult(SEXP ZSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(matrixVectorMult(Z, y));
    return rcpp_result_gen;
END_RCPP
}
// matrixMatrixMult
Rcpp::NumericMatrix matrixMatrixMult(Rcpp::NumericMatrix Z, Rcpp::NumericMatrix Y);
RcppExport SEXP _BITS_matrixMatrixMult(SEXP ZSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixMatrixMult(Z, Y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BITS_initializeTerms", (DL_FUNC) &_BITS_initializeTerms, 3},
    {"_BITS_completeSearch", (DL_FUNC) &_BITS_completeSearch, 10},
    {"_BITS_memoryTest", (DL_FUNC) &_BITS_memoryTest, 0},
    {"_BITS_customLm", (DL_FUNC) &_BITS_customLm, 2},
    {"_BITS_matrixVectorMult", (DL_FUNC) &_BITS_matrixVectorMult, 2},
    {"_BITS_matrixMatrixMult", (DL_FUNC) &_BITS_matrixMatrixMult, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BITS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
